{"version":3,"sources":["components/pagination/styles.js","components/pagination/index.js","constants/columns.js","components/FilterDropdown.js","components/table/styles.js","components/table/index.js","components/searchBar/styles.js","components/searchBar/index.js","utils/getUniqueValues.js","utils/filterByNumericProperty.js","page/Transaction-page.js","utils/processTransactions.js","utils/filterByStringProperty.js","App.js","serviceWorker.js","index.js"],"names":["PaginationBar","styled","div","_templateObject","_taggedTemplateLiteral","PageButton","button","_templateObject2","Pagination","_ref","totalItems","itemsPerPage","setCurrentPage","totalPages","Math","ceil","React","createElement","data-testid","Array","fill","map","_","index","key","concat","onClick","columnNames","columnKeys","FilterDropdown","options","setSelectedOption","onChange","e","target","value","option","StyledTable","table","StyledHeader","th","StyledRow","tr","_templateObject3","StyledCell","td","_templateObject4","Table","data","statuses","categories","merchants","budgets","setSelectedCategory","setSelectedStatus","setSelectedMerchant","setSelectedBudget","handleBillableChange","name","item","id","type","checked","undefined","readOnly","SearchBarContainer","SearchForm","form","SearchInput","input","SearchButton","ResetButton","_templateObject5","SearchBar","setSearchQuery","inputValue","setInputValue","placeholder","onSubmit","event","preventDefault","getUniqueValues","array","Set","filter","Boolean","filterByNumericProperty","transactions","property","searchQuery","searchNumber","Number","isNaN","TransactionsTable","setTransactions","useState","displayedTransactions","setDisplayedTransactions","setStatuses","setMerchants","setCategories","setBudgets","selectedStatus","selectedMerchant","selectedCategory","selectedBudget","searchQueryTeamMember","setSearchQueryTeamMember","searchQueryAmount","setSearchQueryAmount","searchQueryGST","setSearchQueryGST","teamMemberInput","setTeamMemberInput","amountInput","setAmountInput","gstInput","setGstInput","currentPage","setTotalItems","useEffect","transactionsData","categoriesData","merchantsData","processedTransactions","processTransactions","categoriesMap","reduce","category","merchantsMap","merchant","categoryId","merchantId","transaction","filteredTransactions","forEach","toLowerCase","includes","filterByStringProperty","length","newDisplayedTransactions","slice","resetSearchQueries","billable","PageContainer","Title","h1","App","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fceb876c.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const PaginationBar = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 20px;\r\n`;\r\n\r\nexport const PageButton = styled.button`\r\n  background-color: #f5f5f5;\r\n  border: none;\r\n  color: #333;\r\n  padding: 10px 20px;\r\n  margin: 0 5px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n\r\n  &:hover {\r\n    background-color: #ddd;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { PaginationBar, PageButton } from \"./styles\";\r\n\r\nconst Pagination = ({ totalItems, itemsPerPage, setCurrentPage }) => {\r\n  const totalPages = Math.ceil(totalItems / itemsPerPage);\r\n\r\n  return (\r\n    <PaginationBar data-testid=\"pagination-bar\">\r\n      {Array(totalPages)\r\n        .fill()\r\n        .map((_, index) => (\r\n          <PageButton\r\n            key={`page-${index + 1}`}\r\n            onClick={() => setCurrentPage(index + 1)}>\r\n            {index + 1}\r\n          </PageButton>\r\n        ))}\r\n    </PaginationBar>\r\n  );\r\n};\r\n\r\nPagination.propTypes = {\r\n  totalItems: PropTypes.number.isRequired,\r\n  itemsPerPage: PropTypes.number.isRequired,\r\n  setCurrentPage: PropTypes.func.isRequired,\r\n};\r\nexport default Pagination;\r\n","export const columnNames = [\r\n  \"Status\",\r\n  \"Date\",\r\n  \"Merchant Name\",\r\n  \"Team Member\",\r\n  \"Category\",\r\n  \"Amount\",\r\n  \"GST\",\r\n  \"Budget\",\r\n  \"Receipt\",\r\n  \"Billable\",\r\n];\r\nexport const columnKeys = [\r\n  \"status\",\r\n  \"date\",\r\n  \"merchant\",\r\n  \"team_member\",\r\n  \"category\",\r\n  \"amount\",\r\n  \"gst\",\r\n  \"budget\",\r\n  \"receipt\",\r\n  \"billable\",\r\n];\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FilterDropdown = ({ options, setSelectedOption }) => (\r\n  <select onChange={(e) => setSelectedOption(e.target.value)}>\r\n    <option value=\"\">All</option>\r\n    {options.map((option) => (\r\n      <option key={option} value={option}>\r\n        {option}\r\n      </option>\r\n    ))}\r\n  </select>\r\n);\r\n\r\nFilterDropdown.propTypes = {\r\n  options: PropTypes.array.isRequired,\r\n  setSelectedOption: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FilterDropdown;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledTable = styled.table`\r\n  margin: 20px 0;\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const StyledHeader = styled.th`\r\n  background-color: #f5f5f5;\r\n  color: #333;\r\n  padding: 10px;\r\n  text-align: center;\r\n`;\r\n\r\nexport const StyledRow = styled.tr`\r\n  &:nth-child(even) {\r\n    background-color: #f2f2f2;\r\n  }\r\n`;\r\n\r\nexport const StyledCell = styled.td`\r\n  padding: 10px;\r\n  text-align: left;\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { columnNames, columnKeys } from \"../../constants/columns\";\r\nimport FilterDropdown from \"../FilterDropdown\";\r\nimport { StyledTable, StyledHeader, StyledRow, StyledCell } from \"./styles\";\r\n\r\nconst Table = ({\r\n  data,\r\n  statuses,\r\n  categories,\r\n  merchants,\r\n  budgets,\r\n  setSelectedCategory,\r\n  setSelectedStatus,\r\n  setSelectedMerchant,\r\n  setSelectedBudget,\r\n  handleBillableChange,\r\n}) => {\r\n  return (\r\n    <StyledTable data-testid=\"table\">\r\n      <thead>\r\n        <tr>\r\n          {columnNames.map((name) => (\r\n            <StyledHeader key={name}>\r\n              {name}\r\n              {name === \"Status\" && (\r\n                <FilterDropdown\r\n                  name=\"Status\"\r\n                  options={statuses}\r\n                  setSelectedOption={setSelectedStatus}\r\n                />\r\n              )}\r\n              {name === \"Merchant Name\" && (\r\n                <FilterDropdown\r\n                  name=\"Merchant Name\"\r\n                  options={merchants}\r\n                  setSelectedOption={setSelectedMerchant}\r\n                />\r\n              )}\r\n              {name === \"Category\" && (\r\n                <FilterDropdown\r\n                  name=\"Category\"\r\n                  options={categories}\r\n                  setSelectedOption={setSelectedCategory}\r\n                />\r\n              )}\r\n              {name === \"Budget\" && (\r\n                <FilterDropdown\r\n                  name=\"Budget\"\r\n                  options={budgets}\r\n                  setSelectedOption={setSelectedBudget}\r\n                />\r\n              )}\r\n            </StyledHeader>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {data.map((item, index) => (\r\n          <StyledRow key={`${index}-${item.id}`}>\r\n            {columnKeys.map((key) => (\r\n              <StyledCell key={`${index}-${key}-${item.id}`}>\r\n                {key === \"receipt\" || key === \"billable\" ? (\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={item[key]}\r\n                    onChange={\r\n                      key === \"billable\"\r\n                        ? () => handleBillableChange(item.id)\r\n                        : undefined\r\n                    }\r\n                    readOnly={key === \"receipt\"}\r\n                  />\r\n                ) : (\r\n                  item[key]\r\n                )}\r\n              </StyledCell>\r\n            ))}\r\n          </StyledRow>\r\n        ))}\r\n      </tbody>\r\n    </StyledTable>\r\n  );\r\n};\r\n\r\nTable.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n  statuses: PropTypes.array.isRequired,\r\n  categories: PropTypes.array.isRequired,\r\n  merchants: PropTypes.array.isRequired,\r\n  budgets: PropTypes.array.isRequired,\r\n  setSelectedCategory: PropTypes.func.isRequired,\r\n  setSelectedStatus: PropTypes.func.isRequired,\r\n  setSelectedMerchant: PropTypes.func.isRequired,\r\n  setSelectedBudget: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Table;\r\n","import styled from \"styled-components\";\r\n\r\nexport const SearchBarContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nexport const SearchForm = styled.form`\r\n  display: flex;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nexport const SearchInput = styled.input`\r\n  flex-grow: 1;\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n`;\r\n\r\nexport const SearchButton = styled.button`\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px;\r\n  margin-left: 10px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n\r\n  &:hover {\r\n    background-color: #0056b3;\r\n  }\r\n`;\r\n\r\nexport const ResetButton = styled.button`\r\n  background-color: #dc3545;\r\n  color: white;\r\n  border: none;\r\n  height: 40px;\r\n  padding: 10px 15px;\r\n  margin-left: 10px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n\r\n  &:hover {\r\n    background-color: #c82333;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { SearchForm, SearchInput, SearchButton } from \"./styles\";\r\n\r\nconst SearchBar = ({\r\n  setSearchQuery,\r\n  inputValue,\r\n  setInputValue,\r\n  placeholder,\r\n}) => {\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    setSearchQuery(inputValue);\r\n  };\r\n\r\n  return (\r\n    <SearchForm onSubmit={handleSubmit} data-testid=\"search-form\">\r\n      <SearchInput\r\n        data-testid=\"search-input\"\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={event => setInputValue(event.target.value)}\r\n        placeholder={placeholder}\r\n      />\r\n      <SearchButton type=\"submit\" data-testid=\"search-button\">Search</SearchButton>\r\n    </SearchForm>\r\n  );\r\n};\r\n\r\nSearchBar.propTypes = {\r\n  setSearchQuery: PropTypes.func.isRequired,\r\n  placeholder: PropTypes.string,\r\n};\r\n\r\nexport default SearchBar;\r\n","/**\r\n * Get unique values from an array of objects\r\n * @param {Object[]} array - The array of objects to get unique values from.\r\n * @param {string} key - The key to get unique values for.\r\n * @returns {string[]} - An array of unique values.\r\n */\r\n\r\nexport function getUniqueValues(array, key) {\r\n  return [...new Set(array.map((item) => item[key]).filter(Boolean))];\r\n}\r\n","/**\r\n * @param {Array} transactions\r\n * @param {String} property\r\n * @param {String} searchQuery\r\n * @returns {Array} *\r\n */\r\n\r\nexport function filterByNumericProperty(transactions, property, searchQuery) {\r\n  if (searchQuery) {\r\n    const searchNumber = Number(searchQuery);\r\n    if (!isNaN(searchNumber)) {\r\n      return transactions.filter((item) => item[property] === searchNumber);\r\n    }\r\n  }\r\n  return transactions;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport transactionsData from \"../data/transactions.json\";\r\nimport categoriesData from \"../data/categories.json\";\r\nimport merchantsData from \"../data/merchants.json\";\r\nimport Pagination from \"../components/pagination\";\r\nimport Table from \"../components/table/index.js\";\r\nimport SearchBar from \"../components/searchBar\";\r\nimport {\r\n  processTransactions,\r\n  getUniqueValues,\r\n  filterByStringProperty,\r\n  filterByNumericProperty,\r\n} from \"../utils\";\r\nimport {\r\n  SearchBarContainer,\r\n  ResetButton,\r\n} from \"../components/searchBar/styles\";\r\n\r\nconst TransactionsTable = () => {\r\n  const [transactions, setTransactions] = useState([]); //The total transactions which need to be kept in state\r\n  const [displayedTransactions, setDisplayedTransactions] = useState([]); //The transactions to be displayed on the current page which are immutable\r\n\r\n  const [statuses, setStatuses] = useState([]); //The unique statuses which are used to filter the transactions\r\n  const [merchants, setMerchants] = useState([]); //The unique merchants which are used to filter the transactions\r\n  const [categories, setCategories] = useState([]); //The unique categories which are used to filter the transactions\r\n  const [budgets, setBudgets] = useState([]); //The unique budgets which are used to filter the transactions\r\n\r\n\r\n  const [selectedStatus, setSelectedStatus] = useState(\"\"); //The selected status which is used to filter the transactions\r\n  const [selectedMerchant, setSelectedMerchant] = useState(\"\"); //The selected merchant which is used to filter the transactions\r\n  const [selectedCategory, setSelectedCategory] = useState(\"\"); //The selected category which is used to filter the transactions\r\n  const [selectedBudget, setSelectedBudget] = useState(\"\"); //The selected budget which is used to filter the transactions\r\n\r\n  const [searchQueryTeamMember, setSearchQueryTeamMember] = useState(\"\"); //The search query for the team member which is used to filter the transactions\r\n  const [searchQueryAmount, setSearchQueryAmount] = useState(\"\"); //The search query for the amount which is used to filter the transactions\r\n  const [searchQueryGST, setSearchQueryGST] = useState(\"\"); //The search query for the GST which is used to filter the transactions\r\n\r\n  const [teamMemberInput, setTeamMemberInput] = useState(\"\"); //The input value for the team member search bar\r\n  const [amountInput, setAmountInput] = useState(\"\"); //The input value for the amount search bar\r\n  const [gstInput, setGstInput] = useState(\"\"); //The input value for the GST search bar\r\n\r\n  const [currentPage, setCurrentPage] = useState(1); //The current page number which is used to calculate the transactions to be displayed\r\n  const [totalItems, setTotalItems] = useState(0); //The total number of transactions which is used to calculate the total number of pages\r\n  const itemsPerPage = 10;\r\n\r\n  // To enable the billable checkable\r\n  const handleBillableChange = (id) => {\r\n    setTransactions(\r\n      transactions.map((item) =>\r\n        item.id === id ? { ...item, billable: !item.billable } : item\r\n      )\r\n    );\r\n  };\r\n\r\n  // Reset the search queries\r\n  const resetSearchQueries = () => {\r\n    setSearchQueryTeamMember(\"\");\r\n    setSearchQueryAmount(\"\");\r\n    setSearchQueryGST(\"\");\r\n    setTeamMemberInput(\"\");\r\n    setAmountInput(\"\");\r\n    setGstInput(\"\");\r\n  };\r\n  // Process the transactions data and show it in the table when the component mounts\r\n  useEffect(() => {\r\n    if (!transactionsData || !categoriesData || !merchantsData) {\r\n      return;\r\n    }\r\n    const processedTransactions = processTransactions(\r\n      transactionsData,\r\n      categoriesData,\r\n      merchantsData\r\n    );\r\n\r\n    setTransactions(processedTransactions);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const statuses = getUniqueValues(transactions, \"status\");\r\n    const budgets = getUniqueValues(transactions, \"budget\");\r\n    const categories = getUniqueValues(categoriesData, \"name\");\r\n    const merchants = getUniqueValues(merchantsData, \"name\");\r\n\r\n    setStatuses(statuses);\r\n    setMerchants(merchants);\r\n    setCategories(categories);\r\n    setBudgets(budgets);\r\n\r\n  }, [transactions]);\r\n\r\n  // Update the displayed transactions when the transactions, selected status, selected merchant, selected category, or selected budget change\r\n  useEffect(() => {\r\n    // The default value of filteredTransactions is the total transactions\r\n    let filteredTransactions = transactions;\r\n\r\n    // If a selected status is provided, filter the transactions by status as the first step\r\n    const filters = [\r\n      { key: \"category\", value: selectedCategory },\r\n      { key: \"status\", value: selectedStatus },\r\n      { key: \"merchant\", value: selectedMerchant },\r\n      { key: \"budget\", value: selectedBudget },\r\n    ];\r\n\r\n    filters.forEach((filter) => {\r\n      if (filter.value) {\r\n        filteredTransactions = filteredTransactions.filter(\r\n          (item) => item[filter.key] === filter.value\r\n        );\r\n      }\r\n    });\r\n\r\n    // If a search query is provided, filter the transactions by the search query as the second step\r\n    if (searchQueryTeamMember) {\r\n      filteredTransactions = filterByStringProperty(\r\n        filteredTransactions,\r\n        \"team_member\",\r\n        searchQueryTeamMember\r\n      );\r\n    }\r\n\r\n    if (searchQueryAmount) {\r\n      filteredTransactions = filterByNumericProperty(\r\n        filteredTransactions,\r\n        \"amount\",\r\n        searchQueryAmount\r\n      );\r\n    }\r\n\r\n    if (searchQueryGST) {\r\n      filteredTransactions = filterByNumericProperty(\r\n        filteredTransactions,\r\n        \"gst\",\r\n        searchQueryGST\r\n      );\r\n    }\r\n\r\n    // Update the total items and displayed transactions based on the filtered transactions\r\n    setTotalItems(filteredTransactions.length);\r\n\r\n    const newDisplayedTransactions = filteredTransactions.slice(\r\n      (currentPage - 1) * itemsPerPage,\r\n      currentPage * itemsPerPage\r\n    );\r\n\r\n    setDisplayedTransactions(newDisplayedTransactions);\r\n  }, [\r\n    currentPage,\r\n    transactions,\r\n    selectedStatus,\r\n    selectedMerchant,\r\n    selectedCategory,\r\n    selectedBudget,\r\n    searchQueryTeamMember,\r\n    searchQueryAmount,\r\n    searchQueryGST,\r\n  ]);\r\n\r\n  // Reset the current page to 1 when the selected status, selected merchant, selected category, or selected budget change\r\n  useEffect(() => {\r\n    setCurrentPage(1);\r\n  }, [selectedCategory, selectedStatus, selectedMerchant, selectedBudget]);\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <SearchBarContainer data-testid=\"searchbar-container\">\r\n        <SearchBar\r\n          setSearchQuery={setSearchQueryTeamMember}\r\n          inputValue={teamMemberInput}\r\n          setInputValue={setTeamMemberInput}\r\n          placeholder=\"Team Member\"\r\n        />\r\n        <SearchBar\r\n          setSearchQuery={setSearchQueryAmount}\r\n          inputValue={amountInput}\r\n          setInputValue={setAmountInput}\r\n          placeholder=\"Amount\"\r\n        />\r\n        <SearchBar\r\n          setSearchQuery={setSearchQueryGST}\r\n          inputValue={gstInput}\r\n          setInputValue={setGstInput}\r\n          placeholder=\"GST\"\r\n        />\r\n        <ResetButton onClick={resetSearchQueries}>Reset</ResetButton>\r\n      </SearchBarContainer>\r\n      <Table\r\n        data={displayedTransactions}\r\n        statuses={statuses}\r\n        categories={categories}\r\n        merchants={merchants}\r\n        budgets={budgets}\r\n        setSelectedCategory={setSelectedCategory}\r\n        setSelectedStatus={setSelectedStatus}\r\n        setSelectedMerchant={setSelectedMerchant}\r\n        setSelectedBudget={setSelectedBudget}\r\n        handleBillableChange={handleBillableChange}\r\n      />\r\n      <Pagination\r\n        totalItems={totalItems}\r\n        itemsPerPage={itemsPerPage}\r\n        setCurrentPage={setCurrentPage}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionsTable;\r\n","/**\r\n * Processes the transactions data by replacing the category and merchant IDs with their respective names.\r\n *\r\n * @param {Object[]} transactionsData - An array of transaction objects. Each object should have the following properties:\r\n *   @property {string} id - The UUID of the transaction.\r\n *   @property {('complete'|'incomplete'|'exported')} status - The status of the transaction.\r\n *   @property {string} date - The date of the transaction in ISO 8601 format.\r\n *   @property {string} merchant - The UUID of the merchant associated with the transaction.\r\n *   @property {string} team_member - The name of the team member associated with the transaction.\r\n *   @property {string} budget - The budget associated with the transaction.\r\n *   @property {boolean} receipt - Whether the transaction has a receipt.\r\n *   @property {boolean} billable - Whether the transaction is billable.\r\n *   @property {number} gst - The GST amount for the transaction.\r\n *   @property {number} amount - The amount of the transaction.\r\n *   @property {string} category - The UUID of the category associated with the transaction.\r\n * @param {Object[]} categoriesData - An array of category objects. Each object should have the following properties:\r\n *   @property {string} id - The UUID of the category.\r\n *   @property {string} name - The name of the category.\r\n * @param {Object[]} merchantsData - An array of merchant objects. Each object should have the following properties:\r\n *   @property {string} id - The UUID of the merchant.\r\n *   @property {string} name - The name of the merchant.\r\n * @returns {Object[]} processedTransactions - An array of processed transaction objects. Each object has the same properties as the input transaction objects, but the `category` and `merchant` properties are replaced with their respective names.\r\n *   @property {string} id - The UUID of the transaction.\r\n *   @property {('complete'|'incomplete'|'exported')} status - The status of the transaction.\r\n *   @property {string} date - The date of the transaction in ISO 8601 format.\r\n *   @property {string} merchant - The value of the merchant name.\r\n *   @property {string} team_member - The name of the team member associated with the transaction.\r\n *   @property {string} budget - The budget associated with the transaction.\r\n *   @property {boolean} receipt - Whether the transaction has a receipt.\r\n *   @property {boolean} billable - Whether the transaction is billable.\r\n *   @property {number} gst - The GST amount for the transaction.\r\n *   @property {number} amount - The amount of the transaction.\r\n *   @property {string} category - The value of the category name.\r\n */\r\n\r\nexport const processTransactions = (\r\n  transactionsData,\r\n  categoriesData,\r\n  merchantsData\r\n) => {\r\n  // Create a map of categories\r\n  const categoriesMap = categoriesData.reduce((map, category) => {\r\n    map[category.id] = category.name;\r\n    return map\r\n  }, {})\r\n\r\n  // Create a map of merchants\r\n  const merchantsMap = merchantsData.reduce((map, merchant) => {\r\n    map[merchant.id] = merchant.name;\r\n    return map;\r\n  }, {});\r\n\r\n  // Process the transactions data by replacing the category and merchant ids with their names using the maps created above\r\n  const processedTransactions = transactionsData.map(\r\n    ({ category: categoryId, merchant: merchantId, ...transaction }) => ({\r\n      ...transaction,\r\n      category: categoriesMap[categoryId] || \"\",\r\n      merchant: merchantsMap[merchantId] || \"\",\r\n    })\r\n  );\r\n\r\n  return processedTransactions;\r\n};\r\n","/**\r\n * Filter an array of objects by a string property\r\n * @param {Object[]} transactions - The array of transactions to filter.\r\n * @param {string} property - The property to filter by.\r\n * @param {string} searchQuery - The search query to filter by.\r\n * @returns {Object[]} - The filtered array of transactions.\r\n */\r\n\r\nexport function filterByStringProperty(transactions, property, searchQuery) {\r\n  if (searchQuery) {\r\n    return transactions.filter(\r\n      (item) =>\r\n        item[property] &&\r\n        typeof item[property] === \"string\" &&\r\n        item[property].toLowerCase().includes(searchQuery.toLowerCase())\r\n    );\r\n  }\r\n  return transactions;\r\n}\r\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport TransactionsTable from \"./page/Transaction-page\";\n\nconst PageContainer = styled.div`\n  max-width: 1200px;\n  padding: 24px;\n  margin: 0 auto;\n`;\n\nconst Title = styled.h1`\n  font-family: sans-serif;\n  font-size: 32px;\n  font-weight: 600;\n  text-align: center;\n`;\n\nconst App = () => (\n  <PageContainer>\n    <Title>Transactions</Title>\n    <TransactionsTable />\n  </PageContainer>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport categories from './data/categories.json';\nimport merchants from './data/merchants.json';\nimport transactions from './data/transactions.json';\n\nReactDOM.render(\n    <App categories={categories} merchants={merchants} transactions={transactions} />,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}